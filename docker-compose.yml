# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
version: "3"

services:
  postgres:
    build: 
      context: ./postgres
      dockerfile: postgres.Dockerfile
    container_name: postgres
    env_file:
      - .env/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/postgres_data:/var/lib/postgresql/data:rw
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  superset:
    build:
      context: ./superset
      dockerfile: superset.Dockerfile
    container_name: superset
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
      trino:
        condition: service_healthy
      nessie:
        condition: service_healthy
      airflow:
        condition: service_healthy
    env_file: 
      - .env/postgres.env
      - .env/superset.env
    ports:
      - "8088:8088"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
  trino:
    image: trinodb/trino:467
    container_name: trino
    networks:
      iceberg_net:
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino:rw
      - ./trino/data:/var/trino:rw
    env_file:
      - .env/minio.env
    environment:
      - JAVA_TOOL_OPTIONS=-Duser.timezone=UTC
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      nessie:
        condition: service_healthy
      airflow:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/info || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  airflow:
    build: 
      context: ./airflow
      dockerfile: airflow.Dockerfile
    container_name: airflow
    env_file:
      - .env/airflow.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
  airflow-scheduler:
    build: 
      context: ./airflow
      dockerfile: airflow-scheduler.Dockerfile
    container_name: airflow-scheduler
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env/airflow.env
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
  nessie:
    image: ghcr.io/projectnessie/nessie:0.103.2
    container_name: nessie
    env_file:
      - .env/nessie.env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      airflow:
        condition: service_healthy
    ports:
      - "19120:19120"
    stdin_open: true
    tty: true
    restart: always
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:19120/api/v1/config || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - rest
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      iceberg_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      # /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc mb minio/datalake;
      /usr/bin/mc anonymous set public minio/warehouse;
      /usr/bin/mc anonymous set public minio/datalake;
      tail -f /dev/null
      "
  pgadmin:
    image: elestio/pgadmin:REL-9_1
    networks:
      iceberg_net:
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 15432:80
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
networks:
  iceberg_net:
