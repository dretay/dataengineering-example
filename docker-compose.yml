version: "3"

services:
  postgres:
    build: 
      context: ./postgres
      dockerfile: postgres.Dockerfile
    container_name: postgres
    env_file:
      - docker.env
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/postgres_data:/var/lib/postgresql/data:rw
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  dbt:
    stdin_open: true
    tty: true
    build:
      context: ./dbt
      dockerfile: dbt.Dockerfile
    container_name:  dbt
    networks:
      iceberg_net:
    depends_on:
      trino:
        condition: service_healthy
    volumes:
      - ./dbt/dbt:/root/.dbt:rw
      - ./dbt/workspace:/workspace:rw
  superset:
    build:
      context: ./superset
      dockerfile: superset.Dockerfile
    container_name: superset
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
      trino:
        condition: service_healthy
      nessie:
        condition: service_healthy
      airflow:
        condition: service_healthy
    env_file: 
      - docker.env
    ports:
      - "8088:8088"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
  trino:
    image: trinodb/trino:467
    container_name: trino
    networks:
      iceberg_net:
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino:rw
      - ./trino/data:/var/trino:rw
    env_file:
      - docker.env
    environment:
      - JAVA_TOOL_OPTIONS=-Duser.timezone=UTC
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      nessie:
        condition: service_healthy
      airflow:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/info || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  airflow:
    build: 
      context: ./airflow
      dockerfile: airflow.Dockerfile
    container_name: airflow
    env_file:
      - docker.env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dbt/workspace/datalake:/opt/dbt
      - ./dbt/dbt:/opt/dbt/profiles
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
  airflow-scheduler:
    build: 
      context: ./airflow
      dockerfile: airflow-scheduler.Dockerfile
    container_name: airflow-scheduler
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dbt/workspace/datalake:/opt/dbt
      - ./dbt/dbt:/opt/dbt/profiles
    env_file:
      - docker.env
    networks:
      iceberg_net:
    depends_on:
      postgres:
        condition: service_healthy
  nessie:
    image: ghcr.io/projectnessie/nessie:0.103.2
    container_name: nessie
    env_file:
      - docker.env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      airflow:
        condition: service_healthy
    ports:
      - "19120:19120"
    stdin_open: true
    tty: true
    restart: always
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:19120/api/v1/config || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      iceberg_net:
    depends_on:
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks
    env_file:
      - docker.env
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - docker.env
    networks:
      iceberg_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    restart: on-failure
    networks:
      iceberg_net:
    env_file:
      - docker.env
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc mb minio/datalake;
      /usr/bin/mc anonymous set public minio/warehouse;
      /usr/bin/mc anonymous set public minio/datalake;
      "
  nginx:
    image: nginx:latest
    networks:
      iceberg_net:
    ports:
     - "7443:7443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    restart: always
  codeserver:
    networks:
      iceberg_net:
    platform: linux/x86_64
    image: lscr.io/linuxserver/code-server:latest
    container_name: codeserver
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./code-server/config:/config
      - .:/config/workspace
    ports:
      - 8443:8443
    restart: unless-stopped
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      iceberg_net:
    ports:
      - 8181:8181
    env_file:
      - docker.env
networks:
  iceberg_net:
